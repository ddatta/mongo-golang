package main

import (
	"fmt"
    "context"
    "encoding/json"
    "log"
    "net/http"

    "go.mongodb.org/mongo-driver/mongo"
    "go.mongodb.org/mongo-driver/mongo/options"

    "github.com/gorilla/mux"
)

type apiFunc func(http.ResponseWriter, *http.Request) error
func makeHTTPHandleFunc(f apiFunc) http.HandlerFunc {
    return func(w http.ResponseWriter, *http.Request) {
        if err := f(w, r); err != nil {
            //handle the error
        }
    }
}

type APIServer struct {
    listenAddr string
}

func NewAPIServer(listenAddr string) *APIServer {
    return &APIServer{
            listenAddr: listenAddr
    }
}

func (s *APIServer) Run() {
    router := mux.NewRouter()
    router.HandleFunc("/measurement", s.handleCreateMeasurement)
}

func (s *APIServer) handleCreateMeasurement(w http.ResponseWriter, r *http.Request) error{
    w.Header().Set("Content-Type", "application/json")

    var measurement Measurement
    if err := json.NewDecoder(r.Body).Decode(&measurement); err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
        return
    }

    collection := client.Database("iot").Collection("measurement")

    result, err := collection.InsertOne(context.Background(), measurement)
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }

    response := map[string]interface{}{"insertedID": result.InsertedID}
    json.NewEncoder(w).Encode(response)

    return nil
}



func (s *APIServer) handleGetMeasurement(w http.ResponseWriter, r *http.Request) error{
    return nil
}

type Measurement struct {
    Name  string `json:"vehicleId"`
    // Age   int    `json:"age"`
    // Email string `json:"email"`
}

var client *mongo.Client

func main() {
	message := "Gladys"
	fmt.Println(message)

    // MongoDB connection information
    clientOptions := options.Client().ApplyURI("mongodb+srv://appuser:j79WGo9QcRztqUhG@cluster0.9hmet.mongodb.net/iot?retryWrites=true&w=majority&appName=AtlasApp")
    var err error
    client, err = mongo.Connect(context.Background(), clientOptions)
    if err != nil {
        log.Fatal(err)
    }
    defer client.Disconnect(context.Background())

    r := mux.NewRouter()
    r.HandleFunc("/measurement", InsertMeasurement).Methods("POST")

    http.Handle("/", r)
    log.Fatal(http.ListenAndServe(":8083", nil))
}
